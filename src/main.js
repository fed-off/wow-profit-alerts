const schedule = require('node-schedule');
const { fetchAuctionPrices } = require('./api/saddlebag');
const { calculateProfit } = require('./calculations/profit');
const { recipes } = require('./config/recipes');
const { sendMessage } = require('./telegram/bot');

const SHARK_ID = 220147;
const FEAST_ID = 222733;
const TOKEN_ID = 122284;
const REGION = 'eu';
const REALM = 'gordunni';
const SHARK_QTY = 1000;
const FIXED_SHARK_PRICE = 500;

async function checkPrices(retryCount = 0, maxRetries = 3) {
  console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω...', new Date().toLocaleString());
  const prices = await fetchAuctionPrices(REGION, REALM, [SHARK_ID, FEAST_ID, TOKEN_ID]);

  if (!prices && retryCount < maxRetries) {
    console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${maxRetries} —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É...`);
    setTimeout(() => checkPrices(retryCount + 1, maxRetries), 60 * 1000);
    return;
  }

  if (!prices) {
    sendMessage('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –∞—É–∫—Ü–∏–æ–Ω–∞ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫.');
    return;
  }

  const sharkPrice = prices[SHARK_ID] || 500;
  const feastPrice = prices[FEAST_ID] || 410;
  const tokenPrice = prices[TOKEN_ID] || 0;
  const totalItems = SHARK_QTY / 5 * recipes.midnightMasqueradeFeast.yield * 1.5;

  const currentAnalysis = calculateProfit(
    recipes.midnightMasqueradeFeast,
    feastPrice,
    sharkPrice,
    SHARK_QTY,
    totalItems
  );

  const fixedAnalysis = calculateProfit(
    recipes.midnightMasqueradeFeast,
    feastPrice,
    FIXED_SHARK_PRICE,
    SHARK_QTY,
    totalItems
  );

  const message = `
üìä –ê—É–∫—Ü–∏–æ–Ω (–ì–æ—Ä–¥—É–Ω–Ω–∏, EU):
- –ê–∫—É–ª–∞: ${sharkPrice} g
- –ü–∏—Ä: ${feastPrice} g
- –ñ–µ—Ç–æ–Ω: ${tokenPrice} g
- –ü—Ä–∏–±—ã–ª—å (1000 –∞–∫—É–ª —Å–µ–π—á–∞—Å): ${currentAnalysis.totalProfit} g
- –ü—Ä–∏–±—ã–ª—å (–∞–∫—É–ª—ã –ø–æ 500g): ${fixedAnalysis.totalProfit} g
  `.trim();

  sendMessage(message);
  console.log(message);
}

// –ó–∞–ø—É—Å–∫ –∫–∞–∂–¥—ã–π —á–∞—Å –Ω–∞ 5-–π –º–∏–Ω—É—Ç–µ
schedule.scheduleJob('5 * * * *', () => checkPrices(0, 3));

// –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ –¥–ª—è —Ç–µ—Å—Ç–∞
checkPrices(0, 3);